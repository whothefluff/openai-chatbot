package com.openai.chatbot.domain.entity;

import lombok.AccessLevel;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.experimental.Accessors;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.XSlf4j;

import java.time.Instant;
import java.util.Collection;
import java.util.LinkedHashSet;

/**
 * A chat completion response returned by model, based on the provided input
 */
@SuppressWarnings( "UseOfConcreteClass" )
@Data
@EqualsAndHashCode
@ToString
@FieldDefaults( level = AccessLevel.PROTECTED )
@Accessors( chain = true,
            fluent = true )
@XSlf4j
public class ChatResponse{

  Integer id;
  Instant createdAt;
  Instant modifiedAt;
  String object;
  Integer created;
  String model;
  Collection<ChatResponse.Choice> choices = new LinkedHashSet<>( );
  ChatResponse.Usage usage;

  public ChatResponse addChoice( ChatResponse.Choice choice ){

    log.entry( choice );
    this.choices.add( choice );
    return log.exit( this );

  }

  /**
   * One choice of the chat completion
   */
  @Data
  @EqualsAndHashCode
  @ToString
  @FieldDefaults( level = AccessLevel.PROTECTED )
  @Accessors( chain = true,
              fluent = true )
  public static class Choice{

    Integer id;
    Instant createdAt;
    Instant modifiedAt;
    Integer index;
    String finishReason;
    ChatResponse.Choice.Message message;

    /**
     * A chat completion message generated by the model
     */
    @Data
    @EqualsAndHashCode
    @ToString
    @FieldDefaults( level = AccessLevel.PROTECTED )
    @Accessors( chain = true,
                fluent = true )
    public static class Message{

      ChatMessageRole role;
      String content;
      ChatResponse.Choice.Message.FunctionCall functionCall;

      /**
       * The name and arguments of a function that should be called, as generated by the model
       */
      @Data
      @EqualsAndHashCode
      @ToString
      @FieldDefaults( level = AccessLevel.PROTECTED )
      @Accessors( chain = true,
                  fluent = true )
      public static class FunctionCall{

        String name;
        String arguments;

      }

    }

  }

  /**
   * Statistics for the completion request
   */
  @Data
  @EqualsAndHashCode
  @ToString
  @FieldDefaults( level = AccessLevel.PROTECTED )
  @Accessors( chain = true,
              fluent = true )
  public static class Usage{

    Integer promptTokens;
    Integer completionTokens;
    Integer totalTokens;

  }

}